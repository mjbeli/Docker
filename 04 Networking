  More info: https://docs.docker.com/network/
  
  	docker network --help
	docker network list
  	docker run -d -P nginx  --> la opción -P publica todos los puertos del contenedor al host
  	docker run -d -p 8080:80 nginx --> la opción -p mapea explícitamente el puerto 8080 del host 
					  al puerto 80 del contenedor (podemos ver en el dockerfile del 
					  contenedor nginx que se va a publicar en el puerto 80). 
					  La opción -d ejecuta un contenedor en modo "detached"/background. 
					  Tanto con la opción -d como sin ella, esta instrucción lanza el 
					  nginx y se queda levantado, ¡pero sin la opción -d el shell de linux 
					  se queda esperando hasta que ngix termina de ejecutar. 
					  Con el -d el contenedor se queda corriendo pero el shell está desbloqueado 
					  y puedes seguir trabajando.
                                  
  	
  	docker network inspect bridge -> list all alive containers using bridge network, see an example below:
  	Among other info we can see 2 containers running in brige network.
  	"Containers": {
            "5ab8406cb839274a78a00bca2683271d80e0acc34dd99f44cfdff78bf0303e2c": {
                "Name": "musing_khorana",
                "EndpointID": "64b95b1591a1747e7077990e6400732e553550eaccc747ca9bcce19d1ff1d1d4",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            },
            "ca97b748f544bf35b1cbd404c251585b10fe5dd1ffca7b17671da995f5a16f01": {
                "Name": "suspicious_perlman",
                "EndpointID": "873f3185e7326e5f7a791e0ce65c547d79542a3fae19309d73c4af17bd3b6fde",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            }

	If we stop all containers then we'll get:
	"Containers": {},

NETWORKS TYPES
	brige: default network. Bridge networks are usually used when your applications run in standalone 
		containers that need to communicate. Creating a network without a specified type will create
		of this type.
	host: remove network isolation between the container and the Docker host, and use the host’s networking directly
		usa la red del propio equipo host.
	overlay: overlay networks connect multiple Docker daemons together and enable swarm services to communicate 
		with each other.
	none: for this container, disable all networking. Usually used in conjunction with a custom network driver.
	
 	- User-defined bridge networks are best when you need multiple containers to communicate on the same Docker host.
 	- Host networks are best when the network stack should not be isolated from the Docker host, but you want other 
 	aspects of the container to be isolated.
 	- Overlay networks are best when you need containers running on different Docker hosts to communicate, 
	or when multiple applications work together using swarm services.

Al hacer un "docker inspect #NombreContenedor" nos devuelve un JSON que contiene la red a la que pertenece el contenedor:
	"Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "NetworkID": "50411d976e93a7703e149cc73f17187d9f5a4e5168f31c566d8a04ed889ba7e8",
                    "EndpointID": "",
                    "Gateway": "",
                    "IPAddress": "",
                    "IPPrefixLen": 0,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": ""
                }

	docker network create mired --> crea una red con nombre "mired"
	docker run -it -d --network mired ubuntu --> crear un contenedor de la imagen ubuntu y la asigna a la red "mired"
	docker network connect mired ubuntu3 --> conecta el contenedor "ubuntu3" a la red "mired" 
						¡atención! no desagina la red que tuviera, así que ubuntu3 estará en 2 redes.
	
